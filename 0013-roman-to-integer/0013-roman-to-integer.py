class Solution:
    def romanToInt(self, s: str) -> int:
        set = {"I":1,
               "V":5,
               "X":10,
               "L":50,
               "C":100,
               "D":500,
               "M":1000}
        
        num = 0
        
        for i in range(0, len(s)-1):
            if set[s[i]] < set[s[i+1]]:
                num -= set[s[i]]
            else:
                num += set[s[i]]
        num += set[s[-1]]
        return num
        
        
# 대원칙: 큰수 -> 작은수 
# EX) "MXI" => 1000 10 1 ==> 1011

# 만약, 작은수 -> 큰수 (순서로 적혀있다면, 앞의 작은수는 "음수")
# EX) "CMXCVIII" 
# CM 100 1000 (작은 수가 앞이므로, 100은 음수처리 즉, 1000-100 = 900)
# XC 10 100 (100-10=90)
# VII => 5+1+1+1 =8

# result = 998


## HW 2)
# List:
# 검색 시간: list에서 원소를 검색할 때는 해당 원소가 위치한 인덱스를 찾아야 합니다. 따라서 리스트의 검색 시간은 O(n)입니다. 최악의 경우, 모든 요소를 확인해야 합니다.
# 삽입 시간: 원소를 중간에 삽입할 경우, 해당 위치 이후의 모든 원소를 뒤로 이동시켜야 하므로 O(n)입니다.

# Set:
# 검색 시간: set은 해시 테이블로 구현되어 있어, 평균적으로 원소를 상수 시간 내에 검색할 수 있습니다. 따라서 검색 시간은 O(1)입니다. 최악의 경우 충돌이 발생할 수 있어 O(n)이 될 수 있지만, 일반적으로는 빠릅니다.
# 삽입 시간: set에 원소를 추가하는 경우, 해시 함수를 사용하여 해당 원소의 위치를 찾아 삽입하므로 평균적으로 O(1)입니다.
